/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using NUnitExtension.OutSystems.Framework;
using OutSystems.Common;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.RuntimeCommon;
using OutSystems.ServerTests.DatabaseProvider.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace OutSystems.ServerTests.DatabaseProvider.DMLService {

    [DashboardTestFixture(DashboardTest.DashboardTestKind)]
    public class DMLFunctionsTests : DMLTest {
                
        private static readonly string[] DATE_FORMATS = new[] {
            "dd/MM/yyyy", "dd-MM-yyyy", "MM-dd-yyyy", "MM/dd/yyyy", CommonConstants.DefaultDateFormat, "yyyy/MM/dd"
        };

        private const string DEFAULT_TIME_FORMAT = "HH:mm:ss";
        private const string DEFAULT_DATE_FORMAT = CommonConstants.DefaultDateFormat;

        private const string ERROR_MESSAGE_FORMAT = "Error executing function {0} with parameters: {1}. Executed SQL: {2}";

        private static void AssertValues<T>(IDatabaseServices services, string funcName, string sqlFormat, IEnumerable<object> paramsToTest, Func<object, T> expectedConverter) {
            var sqlExecutor = new SQLExecutor(services);
            foreach (var value in paramsToTest) {
                T expected = expectedConverter(value);
                string sql = GetSql(sqlFormat, value, sqlExecutor);
                //Console.WriteLine(string.Format("Asserting SQL: {0} with value {1}", sql, value));
                T result = ExecuteScalar<T>(sqlExecutor, sql, value);
                AssertEqual(expected, result, string.Format(ERROR_MESSAGE_FORMAT, funcName, GetParameterValuesString(value), sql));
            }
        }

		private static void AssertValuesMulti<T>(int valNumber, IDatabaseServices services, string funcName, string sqlFormat, IEnumerable<object> paramsToTest, Func<object, T> expectedConverter)
		{
			var sqlExecutor = new SQLExecutor(services);
			
			foreach (var value in paramsToTest)
			{
				object values = value;
				if(valNumber > 1)
				{
					values = new object[valNumber];
					for (int i = 0; i < valNumber; i++)
					{
						((object[])values)[i] = value;
					}
				}

				T expected = expectedConverter(value);
				string sql = GetSql(sqlFormat, values, sqlExecutor);
				T result = ExecuteScalar<T>(sqlExecutor, sql, values);
				AssertEqual(expected, result, string.Format(ERROR_MESSAGE_FORMAT, funcName, GetParameterValuesString(value), sql));
			}
		}

		private static string GetSql(string sqlFormat, object value, SQLExecutor sqlExecutor) {
            int i = 0;
            return value.GetType().IsArray
                ? string.Format(sqlFormat, ((object[])value).Select<object, object>(o => sqlExecutor.GetParameterName(i++, o.GetType())).ToArray())
                : string.Format(sqlFormat, sqlExecutor.GetParameterName(i, value.GetType()));
        }
        
        private static T ExecuteScalar<T>(SQLExecutor sqlExecutor, string sql, object parameters) {
            return (parameters.GetType().IsArray
                ? sqlExecutor.ExecuteScalar(sql, (object[]) parameters)
                : sqlExecutor.ExecuteScalar(sql, parameters)).RuntimeValue<T>();
        }

        private static string GetParameterValuesString(object value) {
            return value.GetType().IsArray ?
                string.Join(", ", ((object[])value).Select<object, string>(o => o.ToString()).ToArray()) :
                value.ToString();
        }
        
        private static T GetArgValue<T>(object objArray, int index) {
            return (T)((object[])objArray)[index];
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Abs function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestAbs(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Abs",
                "SELECT " + databaseServices.DMLService.Functions.Abs("{0}") + " FROM DUMMY" + MachineName,
                new object[] { -1.44m, 4.21m, 0m, -2m, 50m },
                o => ScriptableBuiltInFunction.Abs(Convert.ToDecimal(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Round function is coherent with the behavior of the built-in function in code, WITHOUT validating the edge cases for mid-points (e.g. 1.5)")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestRound(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Round",
                "SELECT " + databaseServices.DMLService.Functions.Round("{0}") + " FROM DUMMY"+MachineName,
                new object[] { -2.145453m, 0m, 50m, 3.14m },
                o => ScriptableBuiltInFunction.Round(Convert.ToDecimal(o)));
        }

        [IterativeTestCase(typeof(ServerOnlyDMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Sqrt function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestSqrt(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Sqrt",
                "SELECT " + databaseServices.DMLService.Functions.Sqrt("{0}") + " FROM DUMMY"+MachineName,
                new object[] { 0m, 1m, 2.25m, 9m },
                o => ScriptableBuiltInFunction.Sqrt(Convert.ToDecimal(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Trunc function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTrunc(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Trunc",
                "SELECT " + databaseServices.DMLService.Functions.Trunc("{0}") + " FROM DUMMY"+MachineName,
                new object[] { 0m, 1m, 3.14m, 10.34563434m },
                o => ScriptableBuiltInFunction.Trunc(Convert.ToDecimal(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Concat function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestConcat(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Concat",
                "SELECT " + databaseServices.DMLService.Functions.Concat("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { "Dave", "Lauper" }, new object[] { "Out", "Systems" }, new object[] { "First", "" }, new object[] { "", "Last" }, new object[] { "", "" } },
                o => ScriptableBuiltInFunction.Concat(GetArgValue<string>(o, 0), GetArgValue<string>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Index function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestIndex(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Index",
                "SELECT " + databaseServices.DMLService.Functions.Index("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { "Test", "NotFound" }, new object[] { "MyTest1 MyTest2", "Test" }, new object[] { "", "NotFound" } },
                o => ScriptableBuiltInFunction.Index(GetArgValue<string>(o, 0), GetArgValue<string>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Length function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestLength(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Length",
                "SELECT " + databaseServices.DMLService.Functions.Length("{0}") + " FROM DUMMY"+MachineName,
                new object[] { "DaveLauper", "Test With Spaces", "" },
                o => ScriptableBuiltInFunction.Length(o.ToString()));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Replace function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestReplace(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Replace",
                "SELECT " + databaseServices.DMLService.Functions.Replace("{0}", "{1}", "{2}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { "DaveLauper", "NotFound", "" }, new object[] { "Test1Test2Test3", "Test", "0" }, new object[] { "Test1Test2Test3", "3", "1" }, new object[] { "Test1Test2Test3", "Test", "" } },
                o => ScriptableBuiltInFunction.Replace(GetArgValue<string>(o, 0), GetArgValue<string>(o, 1), GetArgValue<string>(o, 2)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Substr function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestSubstr(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Substr",
                "SELECT " + databaseServices.DMLService.Functions.Substr("{0}", "{1}", "{2}") + " FROM DUMMY"+MachineName,
                //VM - fixed values of the test - values out of range are not accepted by DB2 v10.5.5
                new object[] { new object[] { "DaveLauper", 0, 4 }, new object[] { "DaveLauper", 4, 6 }, new object[] { "DaveLauper", 4, 0 }, new object[] { "DaveLauper", 9, 0 }, new object[] { "DaveLauper", 0, 10 } },
                o => ScriptableBuiltInFunction.Substr(GetArgValue<string>(o, 0), GetArgValue<int>(o, 1), GetArgValue<int>(o, 2)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the ToLower function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestToLower(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "ToLower",
                "SELECT " + databaseServices.DMLService.Functions.ToLower("{0}") + " FROM DUMMY"+MachineName,
                new object[] { "DaveLauper", "Test With Spaces", "" },
                o => ScriptableBuiltInFunction.ToLower(o.ToString()));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the ToUpper function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestToUpper(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "ToUpper",
                "SELECT " + databaseServices.DMLService.Functions.ToUpper("{0}") + " FROM DUMMY"+MachineName,
                new object[] { "DaveLauper", "Test With Spaces", "" },
                o => ScriptableBuiltInFunction.ToUpper(o.ToString()));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Trim function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTrim(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Trim",
                "SELECT " + databaseServices.DMLService.Functions.Trim("{0}") + " FROM DUMMY"+MachineName,
                new object[] { "DaveLauper", " LeftSpace", "RightSpace", " BothSpaces ", "" },
                o => ScriptableBuiltInFunction.Trim(o.ToString()));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the TrimEnd function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTrimEnd(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "TrimEnd",
                "SELECT " + databaseServices.DMLService.Functions.TrimEnd("{0}") + " FROM DUMMY"+MachineName,
                new object[] { "DaveLauper", " LeftSpace", "RightSpace", " BothSpaces ", "" },
                o => ScriptableBuiltInFunction.TrimEnd(o.ToString()));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the TrimStart function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTrimStart(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "TrimStart",
                "SELECT " + databaseServices.DMLService.Functions.TrimStart("{0}") + " FROM DUMMY"+MachineName,
                new object[] { "DaveLauper", " LeftSpace", "RightSpace", " BothSpaces ", "" },
                o => ScriptableBuiltInFunction.TrimStart(o.ToString()));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the AddDays function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestAddDays(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "AddDays",
                "SELECT " + databaseServices.DMLService.Functions.AddDays("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), -15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 0 }, new object[] { new DateTime(1900, 1, 1, 0, 0, 0), 1 } },
                o => ScriptableBuiltInFunction.AddDays(GetArgValue<DateTime>(o, 0), GetArgValue<int>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the AddHours function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestAddHours(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "AddHours",
                "SELECT " + databaseServices.DMLService.Functions.AddHours("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), -15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 0 }, new object[] { new DateTime(1900, 1, 1, 0, 0, 0), 1 } },
                o => ScriptableBuiltInFunction.AddHours(GetArgValue<DateTime>(o, 0), GetArgValue<int>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the AddMinutes function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestAddMinutes(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "AddMinutes",
                "SELECT " + databaseServices.DMLService.Functions.AddMinutes("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), -15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 0 }, new object[] { new DateTime(1900, 1, 1, 0, 0, 0), 1 } },
                o => ScriptableBuiltInFunction.AddMinutes(GetArgValue<DateTime>(o, 0), GetArgValue<int>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the AddMonths function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestAddMonths(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "AddMonths",
                "SELECT " + databaseServices.DMLService.Functions.AddMonths("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), -15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 0 }, new object[] { new DateTime(1900, 1, 1, 0, 0, 0), 1 }, new object[] { new DateTime(2012, 1, 30, 1, 2, 3), 1 }, new object[] { new DateTime(2012, 3, 30, 1, 2, 3), -1 } },
                o => ScriptableBuiltInFunction.AddMonths(GetArgValue<DateTime>(o, 0), GetArgValue<int>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the AddSeconds function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestAddSeconds(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "AddSeconds",
                "SELECT " + databaseServices.DMLService.Functions.AddSeconds("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), -15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 0 }, new object[] { new DateTime(1900, 1, 1, 0, 0, 0), 1 } },
                o => ScriptableBuiltInFunction.AddSeconds(GetArgValue<DateTime>(o, 0), GetArgValue<int>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the AddYears function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestAddYears(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "AddYears",
                "SELECT " + databaseServices.DMLService.Functions.AddYears("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), -15 }, new object[] { new DateTime(2014, 1, 1, 10, 0, 0), 0 }, new object[] { new DateTime(1900, 1, 1, 0, 0, 0), 1 }, new object[] { new DateTime(2012, 2, 29, 1, 2, 3), 1 }, new object[] { new DateTime(2012, 2, 29, 1, 2, 3), -1 } },
                o => ScriptableBuiltInFunction.AddYears(GetArgValue<DateTime>(o, 0), GetArgValue<int>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the BuildDateTime function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestBuildDateTime(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "BuildDateTime",
                "SELECT " + databaseServices.DMLService.Functions.BuildDateTime("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { new DateTime(1900, 1, 1), new DateTime(1900, 1, 1, 0, 0, 0) }, new object[] { new DateTime(2100, 1, 1), new DateTime(1900, 1, 1, 0, 0, 0) }, new object[] { new DateTime(1900, 1, 1), new DateTime(1900, 1, 1, 10, 11, 12) }, new object[] { new DateTime(2100, 1, 1), new DateTime(1900, 1, 1, 10, 11, 12) } },
                o => ScriptableBuiltInFunction.BuildDateTime(GetArgValue<DateTime>(o, 0), GetArgValue<DateTime>(o, 1)));
        }
        
        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Day function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDay(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Day",
                "SELECT " + databaseServices.DMLService.Functions.Day("{0}") + " FROM DUMMY"+MachineName,
                new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) },
                o => ScriptableBuiltInFunction.Day(Convert.ToDateTime(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DayOfWeek function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDayOfWeek(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "DayOfWeek",
                "SELECT " + databaseServices.DMLService.Functions.DayOfWeek("{0}") + " FROM DUMMY"+MachineName,
                new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) },
                o => ScriptableBuiltInFunction.DayOfWeek(Convert.ToDateTime(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DiffDays function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDiffDays(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "DiffDays",
                "SELECT " + databaseServices.DMLService.Functions.DiffDays("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } },
                o => ScriptableBuiltInFunction.DiffDays(GetArgValue<DateTime>(o, 0), GetArgValue<DateTime>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DiffHours function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDiffHours(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "DiffHours",
                "SELECT " + databaseServices.DMLService.Functions.DiffHours("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } },
                o => ScriptableBuiltInFunction.DiffHours(GetArgValue<DateTime>(o, 0), GetArgValue<DateTime>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DiffMinutes function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDiffMinutes(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "DiffMinutes",
                "SELECT " + databaseServices.DMLService.Functions.DiffMinutes("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } },
                o => ScriptableBuiltInFunction.DiffMinutes(GetArgValue<DateTime>(o, 0), GetArgValue<DateTime>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DiffSeconds function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDiffSeconds(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "DiffSeconds",
                "SELECT " + databaseServices.DMLService.Functions.DiffSeconds("{0}", "{1}") + " FROM DUMMY"+MachineName,
                new object[] { new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } },
                o => ScriptableBuiltInFunction.DiffSeconds(GetArgValue<DateTime>(o, 0), GetArgValue<DateTime>(o, 1)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Hour function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestHour(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Hour",
                "SELECT " + databaseServices.DMLService.Functions.Hour("{0}") + " FROM DUMMY" + MachineName,
                new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) },
                o => ScriptableBuiltInFunction.Hour(Convert.ToDateTime(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Minute function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestMinute(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Minute",
                "SELECT " + databaseServices.DMLService.Functions.Minute("{0}") + " FROM DUMMY" + MachineName,
                new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) },
                o => ScriptableBuiltInFunction.Minute(Convert.ToDateTime(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Month function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestMonth(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Month",
                "SELECT " + databaseServices.DMLService.Functions.Month("{0}") + " FROM DUMMY" + MachineName,
                new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) },
                o => ScriptableBuiltInFunction.Month(Convert.ToDateTime(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the NewDate function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestNewDate(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "NewDate",
                "SELECT " + databaseServices.DMLService.Functions.NewDate("{0}", "{1}", "{2}") + " FROM DUMMY" + MachineName,
                new object[] { new object[] { 1900, 1, 1 }, new object[] { 2012, 2, 29 }, new object[] { 2100, 1, 31 } },
                o => ScriptableBuiltInFunction.NewDate(GetArgValue<int>(o, 0), GetArgValue<int>(o, 1), GetArgValue<int>(o, 2)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the NewDateTime function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestNewDateTime(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "NewDateTime",
                "SELECT " + databaseServices.DMLService.Functions.NewDateTime("{0}", "{1}", "{2}", "{3}", "{4}", "{5}") + " FROM DUMMY" + MachineName,
                new object[] { new object[] { 1900, 1, 1, 0, 0, 0 }, new object[] { 2012, 2, 29, 23, 59, 59 }, new object[] { 2100, 1, 31, 10, 11, 12 } },
                o => ScriptableBuiltInFunction.NewDateTime(GetArgValue<int>(o, 0), GetArgValue<int>(o, 1), GetArgValue<int>(o, 2), GetArgValue<int>(o, 3), GetArgValue<int>(o, 4), GetArgValue<int>(o, 5)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the NewTime function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestNewTime(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "NewTime",
                "SELECT " + databaseServices.DMLService.Functions.NewTime("{0}", "{1}", "{2}") + " FROM DUMMY" + MachineName,
                new object[] { new object[] { 0, 0, 0 }, new object[] { 23, 59, 59 }, new object[] { 10, 11, 12 } },
                o => ScriptableBuiltInFunction.NewTime(GetArgValue<int>(o, 0), GetArgValue<int>(o, 1), GetArgValue<int>(o, 2)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Second function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestSecond(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Second",
                "SELECT " + databaseServices.DMLService.Functions.Second("{0}") + " FROM DUMMY" + MachineName,
                new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) },
                o => ScriptableBuiltInFunction.Second(Convert.ToDateTime(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Year function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestYear(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "Year",
                "SELECT " + databaseServices.DMLService.Functions.Year("{0}") + " FROM DUMMY" + MachineName,
                new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) },
                o => ScriptableBuiltInFunction.Year(Convert.ToDateTime(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the BooleanToInteger function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestBooleanToInteger(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "BooleanToInteger",
                "SELECT " + databaseServices.DMLService.Functions.BooleanToInteger("{0}") + " FROM DUMMY" + MachineName,
                new object[] { true, false },
                o => ScriptableBuiltInFunction.BooleanToInteger(Convert.ToBoolean(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the BooleanToText function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestBooleanToText(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            var sql = "SELECT " + databaseServices.DMLService.Functions.BooleanToText("{0}") + " FROM DUMMY" + MachineName;
            //Console.WriteLine("TestBooleanToText SQL: "+ sql);
            AssertValues(databaseServices, "BooleanToText",
                sql,
                new object[] { true, false },
                o => ScriptableBuiltInFunction.BooleanToText(Convert.ToBoolean(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DateTimeToDate function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDateTimeToDate(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "DateTimeToDate",
                "SELECT " + databaseServices.DMLService.Functions.DateTimeToDate("{0}") + " FROM DUMMY" + MachineName,
                new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) },
                o => ScriptableBuiltInFunction.DateTimeToDate(Convert.ToDateTime(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DateTimeToText function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDateTimeToText(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            string prevDateFormat = DefaultDateFormat;
            try {
                foreach (var dateFormat in DATE_FORMATS) {
                    AssertValues(databaseServices, "DateTimeToText",
                        "SELECT " + databaseServices.DMLService.Functions.DateTimeToText("{0}", dateFormat) + " FROM DUMMY" + MachineName,
                        new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) },
                        o => {
                            ChangeDateFormat(dateFormat);
                            return ScriptableBuiltInFunction.DateTimeToText(Convert.ToDateTime(o));
                        });
                }
            } finally {
                ChangeDateFormat(prevDateFormat);
            }
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DateTimeToTime function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDateTimeToTime(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "DateTimeToTime",
                "SELECT " + databaseServices.DMLService.Functions.DateTimeToTime("{0}") + " FROM DUMMY" + MachineName,
                new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) },
                o => ScriptableBuiltInFunction.DateTimeToTime(Convert.ToDateTime(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DateToDateTime function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDateToDateTime(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "DateToDateTime",
                "SELECT " + databaseServices.DMLService.Functions.DateToDateTime("{0}") + " FROM DUMMY" + MachineName,
                new object[] { new DateTime(1900, 1, 1), new DateTime(2012, 2, 29), new DateTime(2100, 1, 31) },
                o => ScriptableBuiltInFunction.DateToDateTime(Convert.ToDateTime(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DateToText function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDateToText(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            string prevDateFormat = DefaultDateFormat;
            try {
                foreach (var dateFormat in DATE_FORMATS) {
                    AssertValues(databaseServices, "DateToText",
                        "SELECT " + databaseServices.DMLService.Functions.DateToText("{0}", dateFormat) + " FROM DUMMY" + MachineName,
                        new object[] { new DateTime(1900, 1, 1), new DateTime(2012, 2, 29), new DateTime(2100, 1, 31) },
                        o => {
                            ChangeDateFormat(dateFormat);
                            return ScriptableBuiltInFunction.DateToText(Convert.ToDateTime(o));
                        });
                }
            } finally {
                ChangeDateFormat(prevDateFormat);
            }
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DecimalToBoolean function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDecimalToBoolean(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "DecimalToBoolean",
                "SELECT " + databaseServices.DMLService.Functions.DecimalToBoolean("{0}") + " FROM DUMMY" + MachineName,
                new object[] { -1.44m, -1m, 0m, 1m, 50m, 100.123456m },
                o => ScriptableBuiltInFunction.DecimalToBoolean(Convert.ToDecimal(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DecimalToInteger function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDecimalToInteger(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "DecimalToInteger",
                "SELECT " + databaseServices.DMLService.Functions.DecimalToInteger("{0}") + " FROM DUMMY" + MachineName,
                new object[] { -1.44m, -1m, 0m, 1m, 50m, 100.123456m },
                o => ScriptableBuiltInFunction.DecimalToInteger(Convert.ToDecimal(o)));
        }

		/* workaround */
        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DecimalToText function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestDecimalToText(DatabaseProviderTestCase tc) {
			var testFormat = "case when {0} = 0 then '0' else TRIM(TRAILING '.' FROM TRIM(TRAILING '0' FROM cast({1} as decimal(" + 31 + ", " + Constants.DecimalDecimals + ")))) end";
            var databaseServices = tc.Services;
            AssertValuesMulti(2, databaseServices, "DecimalToText",
                "SELECT " + testFormat /*databaseServices.DMLService.Functions.DecimalToText("{0}")*/ + " FROM DUMMY" + MachineName,
                new object[] { -1.44m, -1m, 0m, 1m, 50m, 100.123456m },
                o => ScriptableBuiltInFunction.DecimalToText(Convert.ToDecimal(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the IdentifierToInteger function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestEntityRefIntegerToInteger(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "IdentifierToInteger",
                "SELECT " + databaseServices.DMLService.Functions.IdentifierToInteger("{0}") + " FROM DUMMY" + MachineName,
                new object[] { 0, 1, 100, 1000 },
                o => ScriptableBuiltInFunction.IdentifierToInteger(Convert.ToInt32(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the IdentifierToText function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestEntityRefTextToText(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "IdentifierToText",
                "SELECT " + databaseServices.DMLService.Functions.IdentifierToText("{0}") + " FROM DUMMY" + MachineName,
                new object[] { "", "abc", "1", Guid.NewGuid().ToString() },
                o => ScriptableBuiltInFunction.IdentifierToText(Convert.ToString(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the IntegerToBoolean function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestIntegerToBoolean(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "IntegerToBoolean",
                "SELECT " + databaseServices.DMLService.Functions.IntegerToBoolean("{0}") + " FROM DUMMY" + MachineName,
                new object[] { -10, -1, 0, 1, 50 },
                o => ScriptableBuiltInFunction.IntegerToBoolean(Convert.ToInt32(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the IntegerToDecimal function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestIntegerToDecimal(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "IntegerToDecimal",
                "SELECT " + databaseServices.DMLService.Functions.IntegerToDecimal("{0}") + " FROM DUMMY" + MachineName,
                new object[] { -10, -1, 0, 1, 50 },
                o => ScriptableBuiltInFunction.IntegerToDecimal(Convert.ToInt32(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the LongIntegerToDecimal function is coherent with the behavior of the Convert.ToDecimal function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "lef")]
        public void TestLongIntegerToDecimal(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "LongIntegerToDecimal",
                "SELECT " + databaseServices.DMLService.Functions.LongIntegerToDecimal("{0}") + " FROM DUMMY" + MachineName,
                new object[] { -1234567890123L, -10L, -1L, 0L, 1L, 50L, 1234567890123L },
                o => Convert.ToDecimal(Convert.ToInt64(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the IntegerToIdentifier function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestIntegerToEntityRefInteger(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "IntegerToIdentifier",
                "SELECT " + databaseServices.DMLService.Functions.IntegerToIdentifier("{0}") + " FROM DUMMY" + MachineName,
                new object[] { 0, 1, 50 },
                o => ScriptableBuiltInFunction.IntegerToIdentifier(Convert.ToInt32(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the IntegerToText function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestIntegerToText(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "IntegerToText",
                "SELECT " + databaseServices.DMLService.Functions.IntegerToText("{0}") + " FROM DUMMY" + MachineName,
                new object[] { -10, -1, 0, 1, 50 },
                o => ScriptableBuiltInFunction.IntegerToText(Convert.ToInt32(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the NullDate function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestNullDate(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "NullDate",
                "SELECT " + databaseServices.DMLService.Functions.NullDate() + " FROM DUMMY" + MachineName,
                new object[0],
                o => ScriptableBuiltInFunction.NullDate());
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the NullIdentifier function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestNullIdentifier(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "NullIdentifier",
                "SELECT " + databaseServices.DMLService.Functions.NullIdentifier() + " FROM DUMMY" + MachineName,
                new object[0],
                o => ScriptableBuiltInFunction.NullIdentifier());
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the NullTextIdentifier function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestNullTextIdentifier(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "NullTextIdentifier",
                "SELECT " + databaseServices.DMLService.Functions.NullTextIdentifier() + " FROM DUMMY" + MachineName,
                new object[0],
                o => ScriptableBuiltInFunction.NullTextIdentifier());
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the TextToDate function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTextToDate(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            string prevDateFormat = DefaultDateFormat;
            try {
                foreach (var dateFormat in DATE_FORMATS) {
                    AssertValues(databaseServices, "TextToDate",
                        "SELECT " + databaseServices.DMLService.Functions.TextToDate("{0}", dateFormat) + " FROM DUMMY" + MachineName,
                        new object[] { new DateTime(1900, 1, 1).ToString(dateFormat), new DateTime(2012, 2, 29).ToString(dateFormat), new DateTime(2100, 1, 31).ToString(dateFormat) },
                        o => {
                            ChangeDateFormat(dateFormat);
                            return ScriptableBuiltInFunction.TextToDate(Convert.ToString(o));
                        });
                }
            } finally {
                ChangeDateFormat(prevDateFormat);
            }
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the TextToDateTime function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTextToDateTime(DatabaseProviderTestCase tc) {			
			var databaseServices = tc.Services;
            string prevDateFormat = DefaultDateFormat;
            try {
                foreach (var dateFormat in DATE_FORMATS)
				{
					var localDateFormat = databaseServices.DMLService.Functions.TextToDateTime("{0}", dateFormat);
					/* workaround */
					localDateFormat = localDateFormat.Replace("{0}, 12", "{1}, 12");

					string dateTimeFormat = dateFormat + " " + DEFAULT_TIME_FORMAT;
                    AssertValuesMulti(2, databaseServices, "TextToDateTime",
                        "SELECT " + localDateFormat + " FROM DUMMY" + MachineName,
                        new object[] { new DateTime(1900, 1, 1, 0, 0, 0).ToString(dateTimeFormat), new DateTime(2012, 2, 29, 23, 59, 59).ToString(dateTimeFormat), new DateTime(2100, 1, 31, 10, 11, 12).ToString(dateTimeFormat) },
                        o => {
                            ChangeDateFormat(dateFormat, /*isDateTime*/true);
                            return ScriptableBuiltInFunction.TextToDateTime(Convert.ToString(o));
                        });
                }
            } finally {
                ChangeDateFormat(prevDateFormat);
            }
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the TextToDecimal function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTextToDecimal(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "TextToDecimal",
                "SELECT " + databaseServices.DMLService.Functions.TextToDecimal("{0}") + " FROM DUMMY" + MachineName,
                new object[] { "-1.44", "-1", "0", "1", "50", "100.123456" },
                o => ScriptableBuiltInFunction.TextToDecimal(Convert.ToString(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the TextToIdentifier function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTextToEntityRefText(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "TextToIdentifier",
                "SELECT " + databaseServices.DMLService.Functions.TextToIdentifier("{0}") + " FROM DUMMY" + MachineName,
                new object[] { "", "abc", "1", Guid.NewGuid().ToString() },
                o => ScriptableBuiltInFunction.TextToIdentifier(Convert.ToString(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the TextToInteger function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTextToInteger(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "TextToInteger",
                "SELECT " + databaseServices.DMLService.Functions.TextToInteger("{0}") + " FROM DUMMY" + MachineName,
                new object[] { "-10", "-1", "0", "1", "50" },
                o => ScriptableBuiltInFunction.TextToInteger(Convert.ToString(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the TextToTime function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTextToTime(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            string prevDateFormat = DefaultDateFormat;
            try {
                ChangeDateFormat(DEFAULT_DATE_FORMAT, /*isDateTime*/true);
                AssertValues(databaseServices, "TextToTime",
                    "SELECT " + databaseServices.DMLService.Functions.TextToTime("{0}") + " FROM DUMMY" + MachineName,
                    new object[] { new DateTime(1900, 1, 1, 0, 0, 0).ToString(DEFAULT_TIME_FORMAT), new DateTime(2012, 2, 29, 23, 59, 59).ToString(DEFAULT_TIME_FORMAT), new DateTime(2100, 1, 31, 10, 11, 12).ToString(DEFAULT_TIME_FORMAT) },
                    o => ScriptableBuiltInFunction.TextToTime(Convert.ToString(o)));
            } finally {
                ChangeDateFormat(prevDateFormat);
            }
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the TimeToDateTime function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTimeToDateTime(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "TimeToDateTime",
                "SELECT " + databaseServices.DMLService.Functions.TimeToDateTime("{0}") + " FROM DUMMY" + MachineName,
                new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 23, 59, 59), new DateTime(1900, 1, 1, 10, 11, 12) },
                o => Convert.ToDateTime(o)); // There is no equivalent built-in function, the function exists because of implicit conversions
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the TimeToText function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestTimeToText(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "TimeToText",
                "SELECT " + databaseServices.DMLService.Functions.TimeToText("{0}") + " FROM DUMMY" + MachineName,
                new object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 23, 59, 59), new DateTime(1900, 1, 1, 10, 11, 12) },
                o => ScriptableBuiltInFunction.TimeToText(Convert.ToDateTime(o)));
            
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the TextToLongInteger function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer, Long Integers Project", CreatedBy = "rls")]
        public void TestTextToLongInteger(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "TextToLongInteger",
                "SELECT " + databaseServices.DMLService.Functions.TextToLongInteger("{0}") + " FROM DUMMY" + MachineName,
                new object[] { "-100000000000000", "-10000", "0", "10000", "100000000000000" },
                o => ScriptableBuiltInFunction.TextToLongInteger(Convert.ToString(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the LongIntegerToText function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer, Long Integers Project", CreatedBy = "rls")]
        public void TestLongIntegerToText(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "LongIntegerToText",
                "SELECT " + databaseServices.DMLService.Functions.LongIntegerToText("{0}") + " FROM DUMMY" + MachineName,
                new object[] { -100000000, -1, 0, 1, 100000000 },
                o => ScriptableBuiltInFunction.LongIntegerToText(Convert.ToInt64(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the IdentifierToLongInteger function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer, Long Integers Project", CreatedBy = "rls")]
        public void TestIdentifierToLongInteger(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "IdentifierToLongInteger",
                "SELECT " + databaseServices.DMLService.Functions.IdentifierToLongInteger("{0}") + " FROM DUMMY" + MachineName,
                new object[] { 0, 1000000000 },
                o => ScriptableBuiltInFunction.IdentifierToLongInteger(Convert.ToInt64(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the LongIntegerToIdentifier function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer, Long Integers Project", CreatedBy = "rls")]
        public void TestLongIntegerToIdentifier(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "LongIntegerToIdentifier",
                "SELECT " + databaseServices.DMLService.Functions.LongIntegerToIdentifier("{0}") + " FROM DUMMY" + MachineName,
                new object[] { 0, 1000000000 },
                o => ScriptableBuiltInFunction.LongIntegerToIdentifier(Convert.ToInt64(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the LongIntegerToInteger function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer, Long Integers Project", CreatedBy = "rls")]
        public void TestLongIntegerToInteger(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "LongIntegerToInteger",
                "SELECT " + databaseServices.DMLService.Functions.LongIntegerToInteger("{0}") + " FROM DUMMY" + MachineName,
                new object[] { -1000000000, -1000, 0, 1000, 1000000000 },
                o => ScriptableBuiltInFunction.LongIntegerToInteger(Convert.ToInt64(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the DecimalToLongInteger function is coherent with the behavior of the built-in function in code")]
        [TestDetails(TestIssue = "610148", Feature = "Database Abstraction Layer, Long Integers Project", CreatedBy = "rls")]
        public void TestDecimalToLongInteger(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, "DecimalToLongInteger",
                "SELECT " + databaseServices.DMLService.Functions.DecimalToLongInteger("{0}") + " FROM DUMMY" + MachineName,
                new object[] { -1.44444444m, -1m, 0m, 1m, 50m, 100.123456789m },
                o => ScriptableBuiltInFunction.DecimalToLongInteger(Convert.ToDecimal(o)));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the If function is correct for true and false conditions")]
        [TestDetails(TestIssue = "644181", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestIf(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            string trueCondition = databaseServices.DMLService.Operators.Equal("1", "1");
            string falseCondition = databaseServices.DMLService.Operators.LessThen("1", "0");
            string ifTrue = "SELECT " + databaseServices.DMLService.Functions.IfElse(trueCondition, "{0}", "{1}") + " FROM DUMMY" + MachineName;
            string ifFalse = "SELECT " + databaseServices.DMLService.Functions.IfElse(falseCondition, "{0}", "{1}") + " FROM DUMMY" + MachineName;

            AssertValues(databaseServices, "If", ifTrue, new object[] { new object[] { 1, 0 } }, o => GetArgValue<int>(o, 0));
            AssertValues(databaseServices, "If", ifFalse, new object[] { new object[] { 1, 0 } }, o => GetArgValue<int>(o, 1));

            AssertValues(databaseServices, "If", ifTrue, new object[] { new object[] { 1.5M, 0.5M } }, o => GetArgValue<decimal>(o, 0));
            AssertValues(databaseServices, "If", ifFalse, new object[] { new object[] { 1.5M, 0.5M } }, o => GetArgValue<decimal>(o, 1));

            AssertValues(databaseServices, "If", ifTrue, new object[] { new object[] { new DateTime(2000, 1, 1), new DateTime(1900, 1, 1) } }, o => GetArgValue<DateTime>(o, 0));
            AssertValues(databaseServices, "If", ifFalse, new object[] { new object[] { new DateTime(2000, 1, 1), new DateTime(1900, 1, 1) } }, o => GetArgValue<DateTime>(o, 1));

            AssertValues(databaseServices, "If", ifTrue, new object[] { new object[] { "trueString", "falseString" } }, o => GetArgValue<string>(o, 0));
            AssertValues(databaseServices, "If", ifFalse, new object[] { new object[] { "trueString", "falseString" } }, o => GetArgValue<string>(o, 1));

            AssertValues(databaseServices, "If", ifTrue, new object[] { new object[] { true, false } }, o => GetArgValue<bool>(o, 0));
            AssertValues(databaseServices, "If", ifFalse, new object[] { new object[] { true, false } }, o => GetArgValue<bool>(o, 1));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the If function inside another If function is correct for (true, true), (true, false), (false, true) and (false, false) conditions")]
        [TestDetails(TestIssue = "644181", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestIfInsideIf(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            string trueCondition = databaseServices.DMLService.Operators.Equal("1", "1");
            string falseCondition = databaseServices.DMLService.Operators.LessThen("1", "0");
            string ifTrueTrue = "SELECT " + databaseServices.DMLService.Functions.IfElse(trueCondition,
                databaseServices.DMLService.Functions.IfElse(trueCondition, "{0}", "{1}"),
                databaseServices.DMLService.Functions.IfElse(trueCondition, "{2}", "{3}")) + " FROM DUMMY" + MachineName;

            string ifTrueFalse = "SELECT " + databaseServices.DMLService.Functions.IfElse(trueCondition,
                databaseServices.DMLService.Functions.IfElse(falseCondition, "{0}", "{1}"),
                databaseServices.DMLService.Functions.IfElse(trueCondition, "{2}", "{3}")) + " FROM DUMMY" + MachineName;

            string ifFalseTrue = "SELECT " + databaseServices.DMLService.Functions.IfElse(falseCondition,
                databaseServices.DMLService.Functions.IfElse(trueCondition, "{0}", "{1}"),
                databaseServices.DMLService.Functions.IfElse(trueCondition, "{2}", "{3}")) + " FROM DUMMY" + MachineName;

            string ifFalseFalse = "SELECT " + databaseServices.DMLService.Functions.IfElse(falseCondition,
                databaseServices.DMLService.Functions.IfElse(falseCondition, "{0}", "{1}"),
                databaseServices.DMLService.Functions.IfElse(falseCondition, "{2}", "{3}")) + " FROM DUMMY" + MachineName;

            AssertValues(databaseServices, "If(true, If(true, A, b), If(true, c, d))", ifTrueTrue, new object[] { new object[] { "a", "b", "c", "d" } }, o => GetArgValue<string>(o, 0));
            AssertValues(databaseServices, "If(true, If(false, a, B), If(true, c, d))", ifTrueFalse, new object[] { new object[] { "a", "b", "c", "d" } }, o => GetArgValue<string>(o, 1));
            AssertValues(databaseServices, "If(false, If(true, a, b), If(true, C, d))", ifFalseTrue, new object[] { new object[] { "a", "b", "c", "d" } }, o => GetArgValue<string>(o, 2));
            AssertValues(databaseServices, "If(false, If(false, a, b), If(false, c, D))", ifFalseFalse, new object[] { new object[] { "a", "b", "c", "d" } }, o => GetArgValue<string>(o, 3));
        }

        private static string DefaultDateFormat {
            get {
                return FormatInfoLogic.GetOutputDateFormatString();
            }
        }

        private static void ChangeDateFormat(string newFormat) {
            ChangeDateFormat(newFormat, false);
        }

        private static void ChangeDateFormat(string newFormat, bool isDateTime) {
            
            FormatInfoLogic.SetDefaultDateAndDateTimeFormatString(newFormat, newFormat);
        } 

    }
}
