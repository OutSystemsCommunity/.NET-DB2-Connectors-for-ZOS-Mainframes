/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using NUnitExtension.OutSystems.Framework;
using OutSystems.HubEdition.Extensibility.Data.DMLService;
using OutSystems.ServerTests.DatabaseProvider.Framework;
using System;

namespace OutSystems.ServerTests.DatabaseProvider.DMLService {

    [DashboardTestFixture(DashboardTest.DashboardTestKind)]
    public class DMLIdentifiersTests : DMLTest {

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the EscapeIdentifier function can properly escape the name of a column that is similar to a reserved keyword")]
        [TestDetails(TestIssue = "616967", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestEscapeIdentifier(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            var sqlExecutor = new SQLExecutor(databaseServices);
            IDMLIdentifiers dmlIdentifiers = databaseServices.DMLService.Identifiers;

            string sql = "SELECT " + dmlIdentifiers.EscapeIdentifier("DUMMY" + MachineName) + "." + dmlIdentifiers.EscapeIdentifier("SELECT") + " FROM " + dmlIdentifiers.EscapeIdentifier("DUMMY" + MachineName);
            int value = sqlExecutor.ExecuteScalar(sql).RuntimeValue<int>();
            AssertEqual(123, value, "Escape function didn't work as expected. SQL: " + sql);
        }
        
        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the GetValidIdentifier returns a valid identifier by executing a query with a parameter which name exceeds the max length limit")]
        [TestDetails(TestIssue = "616967", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestGetValidIdentifier(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            var sqlExecutor = new SQLExecutor(databaseServices);
            IDMLIdentifiers dmlIdentifiers = databaseServices.DMLService.Identifiers;
            string paramPrefix = databaseServices.ExecutionService.ParameterPrefix;
            string param = "";
            for (int i = 0; i < dmlIdentifiers.MaxLength - 1; i++) {
                param += "m";
            }
            string paramName = dmlIdentifiers.GetValidIdentifier("inparam" + param, true);
            string parameterForSQL = paramPrefix + paramName;
            string sql = string.Format("SELECT {0} FROM DUMMY" + MachineName, parameterForSQL);

            int value = sqlExecutor.ExecuteScalar(sql, (i,t) => paramPrefix + paramName, 1).RuntimeValue<int>();
            AssertEqual(1, value, "GetValidIdentifier didn't work as expected. SQL: " + sql);
        }
    }
}
