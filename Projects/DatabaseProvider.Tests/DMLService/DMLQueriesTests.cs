/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections;
using System.Collections.Generic;
using NUnit.Framework;
using NUnitExtension.OutSystems.Framework;
using OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders;
using OutSystems.ServerTests.DatabaseProvider.Framework;
using System;

namespace OutSystems.ServerTests.DatabaseProvider.DMLService {

    [DashboardTestFixture(DashboardTest.DashboardTestKind)]
    public class DMLQueriesTests : DMLTest {

        private const string ERROR_MESSAGE_FORMAT = "Error executing {0} query with SQL: {1}";

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that using the placeholder values defined for the MaxRecords query we can execute a select statement and retrieve only the desired number of rows")]
        [TestDetails(TestIssue = "610149", Feature = "Database Abstraction Layer", CreatedBy = "mar")]
        public void TestMaxRecords(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            var sqlExecutor = new SQLExecutor(databaseServices);

            int maxRecordsValue = 1;
            IDictionary<SelectPlaceholder, string> maxRecordsPlaceholders = databaseServices.DMLService.Queries.SQLPlaceholderValuesForMaxRecords(maxRecordsValue.ToString());
            string beforeStatement = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.BeforeStatement);
            string afterSelect = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.AfterSelectKeyword);
            string beforeFrom = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.BeforeFromKeyword);
            string afterFrom = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.AfterFromKeyword);
            string beforeWhere = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.BeforeWhereKeyword);
            string afterWhere = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.AfterWhereKeyword);
            string beforeGroupBy = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.BeforeGroupByKeyword);
            string afterGroupBy = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.AfterGroupByKeyword);
            string beforeHaving = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.BeforeHavingKeyword);
            string afterHaving = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.AfterHavingKeyword);
            string beforeOrderBy = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.BeforeOrderByKeyword);
            string afterOrderBy = maxRecordsPlaceholders.GetPlaceholderValueTrimStart(SelectPlaceholder.AfterOrderByKeyword);
            string afterStatement = maxRecordsPlaceholders.GetPlaceholderValueTrimEnd(SelectPlaceholder.AfterStatement);

            string sql = beforeStatement + 
                "SELECT " + afterSelect + "NAME " +
                beforeFrom + "FROM " + afterFrom + "PERSON" + MachineName + " " +
                beforeWhere + "WHERE " + afterWhere + databaseServices.DMLService.Operators.Equal("1", "1") + " " +
                beforeGroupBy + "GROUP BY " + afterGroupBy + "NAME " +
                beforeHaving + "HAVING " + afterHaving + databaseServices.DMLService.Operators.Equal("1", "1") + " " +
                beforeOrderBy + "ORDER BY " + afterOrderBy + "NAME " +
                afterStatement;

            sqlExecutor.ExecuteReader(sql, reader => {
                int count = 0;
                while (reader.Read()) {
                    count++;
                }
                AssertEqual(maxRecordsValue, count, string.Format(ERROR_MESSAGE_FORMAT, "MaxRecords", sql));
            });
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that using the placeholder values defined for the Count query we can execute a select statement and obtain the number of rows it retrieves")]
        [TestDetails(TestIssue = "610149", Feature = "Database Abstraction Layer", CreatedBy = "mar")]
        public void TestCount(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            var sqlExecutor = new SQLExecutor(databaseServices);

            IDictionary<StatementPlaceholder, string> countPlaceholders = databaseServices.DMLService.Queries.SQLPlaceholderValuesForCountQuery();
            string beforeStatement = countPlaceholders.GetPlaceholderValueTrimStart(StatementPlaceholder.BeforeStatement);
            string afterStatement = countPlaceholders.GetPlaceholderValueTrimEnd(StatementPlaceholder.AfterStatement);

            string sql = beforeStatement + "SELECT NAME FROM PERSON" + MachineName + " WHERE " + databaseServices.DMLService.Operators.Equal("1", "1") + afterStatement;

            int count = sqlExecutor.ExecuteScalar(sql).RuntimeValue<int>();
            AssertEqual(3, count, string.Format(ERROR_MESSAGE_FORMAT, "Count", sql));
        }

    }
}
