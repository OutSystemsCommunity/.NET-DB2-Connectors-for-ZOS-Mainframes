/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using NUnitExtension.OutSystems.Framework;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.ServerTests.DatabaseProvider.Framework;
using System;

namespace OutSystems.ServerTests.DatabaseProvider.DMLService {

    [DashboardTestFixture(DashboardTest.DashboardTestKind)]
    public class DMLAggregateFunctionsTests : DMLTest {
                
        private const string SQL_FORMAT = "SELECT {0} FROM PERSON{1}";
        private const string ERROR_MESSAGE_FORMAT = "Error executing function {0} with SQL: {1}";

        private static void AssertValues<T>(IDatabaseServices services, string sqlFunctionFragment, T expectedValue) {
            var sqlExecutor = new SQLExecutor(services);
            string sql = string.Format(SQL_FORMAT, sqlFunctionFragment, MachineName);
            T result = sqlExecutor.ExecuteScalar(sql).RuntimeValue<T>();
            AssertEqual(expectedValue, result, string.Format(ERROR_MESSAGE_FORMAT, sqlFunctionFragment, sql));
        }
        
        #region Tests
        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Avg function is correct. Null values should be ignored.")]
        [TestDetails(TestIssue = "679313", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestAvg(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Avg("AGE"), 25.5M);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Avg("WEIGHT"), 90.7M);
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Count (no parameters) function is correct.")]
        [TestDetails(TestIssue = "679313", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestCountAsterisk(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Count(), 3);
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Count function is correct. Null values should be ignored.")]
        [TestDetails(TestIssue = "679313", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestCount(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Count("PERSONID"), 3);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Count("NAME"), 3);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Count("AGE"), 2);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Count("WEIGHT"), 2);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Count("DEAD"), 1);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Count("LASTLOGIN"), 2);
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Max function is correct. Null values should be ignored.")]
        [TestDetails(TestIssue = "679313", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestMax(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Max("PERSONID"), 3);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Max("AGE"), 30);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Max("WEIGHT"), 100.9M);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Max("LASTLOGIN"), new DateTime(2014, 3, 14, 10, 0, 36));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Min function is correct. Null values should be ignored.")]
        [TestDetails(TestIssue = "679313", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestMin(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Min("PERSONID"), 1);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Min("AGE"), 21);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Min("WEIGHT"), 80.5M);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Min("LASTLOGIN"), new DateTime(2014, 3, 13, 14, 50, 23));
        }

        [IterativeTestCase(typeof(DMLTestsConfiguration), Description = "Validates that the behavior of the SQL fragment produced by the Sum function is correct. Null values should be ignored.")]
        [TestDetails(TestIssue = "679313", Feature = "Database Abstraction Layer", CreatedBy = "rls")]
        public void TestSum(DatabaseProviderTestCase tc) {
            var databaseServices = tc.Services;
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Sum("AGE"), 51);
            AssertValues(databaseServices, databaseServices.DMLService.AggregateFunctions.Sum("WEIGHT"), 181.4M);
        }
        #endregion
        
    }
}
