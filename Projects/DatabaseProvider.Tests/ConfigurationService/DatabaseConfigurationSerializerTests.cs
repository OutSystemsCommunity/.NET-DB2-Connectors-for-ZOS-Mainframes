/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using NUnit.Framework;
using NUnitExtension.OutSystems.Framework;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.RuntimeCommon;
using System;
using System.IO;
using OutSystems.ServerTests.DatabaseProvider.Framework;

namespace OutSystems.ServerTests.DatabaseProvider.ConfigurationService {

    [DashboardTestFixture(DashboardTest.DashboardTestKind)]
    public class DatabaseConfigurationSerializerTests : DashboardTest {

        public enum DirectionsEnum { Up, Down, Left, Right }

        class MockDatabaseProvider : BaseDatabaseProvider {
            
            public override IIntegrationDatabaseConfiguration CreateEmptyIntegrationDatabaseConfiguration() {
                throw new NotImplementedException();
            }

            public override IDatabaseServices GetIntegrationDatabaseServices(IRuntimeDatabaseConfiguration databaseConfiguration) {
                throw new NotImplementedException();
            }

            public override DatabaseProviderKey Key {
                get { return DatabaseProviderKey.Deserialize("Oracle"); }
            }

            public override IProviderProperties Properties {
                get { throw new NotImplementedException(); }
            }
        }

        public class MockDatabaseConfiguration : IIntegrationDatabaseConfiguration {

            static readonly string INVISIBLE_TEXT_VALUE = "Invisibile";

            [UserDefinedConfigurationParameter(Label = "MockText", Region = ParameterRegion.DatabaseLocation, Prompt = "MockText_Prompt", Order = 0, IsMandatory = false, IsPassword = true, VisibilityChecker = "IsTextVisible")]
            public string MockText { get; set; }

            [UserDefinedConfigurationParameter(Label = "MockText2", Region = ParameterRegion.DatabaseLocation, Prompt = "MockText2_Prompt", Order = 1, IsMandatory = true, IsPassword = false)]
            public string MockText2 { get; set; }

            [UserDefinedConfigurationParameter(Label = "MockInt", Region = ParameterRegion.UserSpecific, Prompt = "MockInt_Prompt", Order = 1, IsMandatory = true, Example = "MockInt_Example")]
            public int MockInt { get; set; }

            [UserDefinedConfigurationParameter(Label = "MockBool", Region = ParameterRegion.UserAdminSpecific, Prompt = "MockBool_Prompt", Order = 2, Example = "MockBool_Example")]
            public bool MockBool { get; set; }

            [UserDefinedConfigurationParameter(Label = "MockEnum", Region = ParameterRegion.Advanced, Prompt = "MockEnum_Prompt", Order = 3, Example = "MockEnum_Example")]
            public DirectionsEnum MockEnum { get; set; }

            public bool IsTextVisible() {
                return MockText == null || !MockText.Equals(INVISIBLE_TEXT_VALUE);
            }

            public HubEdition.Extensibility.Data.IDatabaseProvider DatabaseProvider {
                get { return new MockDatabaseProvider(); }
            }

            public string ConnectionString {
                get { return "iamaconnectionstring" + AdvancedConfiguration.AdvancedConnectionStringField; }
            }

            [ConfigurationParameter]
            public string ConnectionStringOverride {
                get;
                set;
            }

            public string DatabaseIdentifier {
                get;
                set;
            }
        
            private AdvancedConfiguration advancedConfiguration = new AdvancedConfiguration("", null, null);

            public AdvancedConfiguration AdvancedConfiguration {
                get {
                    return advancedConfiguration;
                }
                set {
                    advancedConfiguration = value;
                }
            }


            public IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration {
                get { return null; }
            }
        }

        [Test(Description = "Checks that visible parameters are serialized")]
        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        public void VisibleParametersAreSerialized() {

            var mockDB = new MockDatabaseConfiguration();
            mockDB.MockText2 = "testing";

            var serialized = Serializers.ForIntegration.Serialize(mockDB);

            StringAssert.Contains("MockText2>testing", serialized);
        }

        [Test(Description = "Checks that extra parameters are serialized")]
        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        public void NonUserDefinedParametersAreSerialized() {

            var mockDB = new MockDatabaseConfiguration();
            mockDB.AdvancedConfiguration.AdvancedConnectionStringField = "advancedconnectionstringvalue";
            mockDB.ConnectionStringOverride = "override";            
            var serialized = Serializers.ForIntegration.Serialize(mockDB);

            StringAssert.Contains("ConnectionStringOverride>override", serialized);
            StringAssert.Contains("AdvancedConnectionStringField>advancedconnectionstringvalue", serialized);
        }

        [Test(Description = "Checks that null parameters are serialized as empty strings")]
        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        public void NullParametersAreSerializedWithEmptyStringValue() {

            var mockDB = new MockDatabaseConfiguration();            
            var serialized = Serializers.ForIntegration.Serialize(mockDB);

            StringAssert.Contains("<MockText2></MockText2>", serialized);
        }

        [Test(Description = "Test that fields can be multiline - serialize")]
        [TestDetails(CreatedBy = "lfl", Feature = "Database Abstraction Layer", TestIssue = "609920")]
        public void SerializeMultiline() {
            var mockDB = new MockDatabaseConfiguration();
            mockDB.MockText = "Multi\nLine\nText!";            
            var serialized = Serializers.ForIntegration.Serialize(mockDB);

            // platform agnostic newline
            var writer = new StringWriter();
            writer.WriteLine("MockText>Multi");
            writer.WriteLine("Line");
            writer.Write("Text!");

            StringAssert.Contains(writer.ToString(), serialized);
        }

        [Test(Description = "Missing parameters don't set object values")]
        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        public void MissingParametersDontSetObjectValues() {
            var serialized = "<DBConfiguration></DBConfiguration>";
            var mockDB = new MockDatabaseConfiguration();            
            Deserializers.ForIntegration.Deserialize(serialized, mockDB);

            Assert.IsNull(mockDB.MockText2);
        }

        [Test(Description = "Check if we don't throw an exception when a serialization containning a non-existant parameter is given.")]
        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        public void NonExistantParameterDontThrowException() {
            var serialized = 
@"<DBConfiguration>
  <NonExistantParameter>asdasdamsd</NonExistantParameter>
</DBConfiguration>";
            var mockDB = new MockDatabaseConfiguration();            
            Deserializers.ForIntegration.Deserialize(serialized, mockDB);
        }

        [Test(Description = "Checks if existing parameters are set after deserialization")]
        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        public void CheckIfExistingParameterIsSetAfterDeserialization() {
            var serialized = 
@"<DBConfiguration>
  <MockText>loasdasd</MockText>
</DBConfiguration>";
            var mockDB = new MockDatabaseConfiguration();            
            Deserializers.ForIntegration.Deserialize(serialized, mockDB);

            Assert.AreEqual("loasdasd", mockDB.MockText);
        }

        [Test(Description = "Sanity Check, invalid configuration will fail with correct Exception")]
        [TestDetails(CreatedBy = "lfl", Feature = "Database Abstraction Layer", TestIssue = "609920")]
        [ExpectedException(typeof(ConfigurationSerializationException))]
        public void CheckInvalidConfigurationGivesError() {
            var serialized = "invalidConfig";
            var mockDB = new MockDatabaseConfiguration();            
            Deserializers.ForIntegration.Deserialize(serialized, mockDB);
        }

        [Test(Description = "Test that fields can be multiline - deserialize")]
        [TestDetails(CreatedBy = "lfl", Feature = "Database Abstraction Layer", TestIssue = "609920")]
        public void DeserializeMultiline() {
            var serialized = 
@"<DBConfiguration>
  <MockText>I'm a multiline
value
with 3 lines!!!</MockText>
</DBConfiguration>";
            var mockDB = new MockDatabaseConfiguration();            
            Deserializers.ForIntegration.Deserialize(serialized, mockDB);

            Assert.AreEqual("I'm a multiline\nvalue\nwith 3 lines!!!", mockDB.MockText);
        }

    }
}
