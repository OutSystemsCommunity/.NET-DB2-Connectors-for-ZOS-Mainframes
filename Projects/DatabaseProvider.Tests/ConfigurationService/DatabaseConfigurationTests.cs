/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using NUnit.Framework;
using NUnitExtension.OutSystems.Framework;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration;
using OutSystems.ServerTests.DatabaseProvider.Framework;

namespace OutSystems.ServerTests.DatabaseProvider.ConfigurationService {

    public class TestConfiguration : AgnosticDatabaseProviderTestConfiguration {
        
        protected override string ConfigurationPathSettingName {
            get {
                return "DatabaseProviderTests.ConfigurationServiceFilesPath";
            }
        }
    }

    [DashboardTestFixture(DashboardTest.DashboardTestKind)]
    public class DatabaseConfigurationTests : DatabaseProviderTest<TestConfiguration> {
        private IIntegrationDatabaseConfiguration CreateIntegrationDatabaseConfiguration(DatabaseProviderTestCase tc) {
            return tc.Services.DatabaseConfiguration.DatabaseProvider.CreateEmptyIntegrationDatabaseConfiguration();
        }

        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        [IterativeTestCase(typeof(TestConfiguration), Description = "Checks if parameters with a visibility checker have a corresponding method")]
        public void CheckIfVisibilityMethodsExist(DatabaseProviderTestCase tc) {
            var configuration = new MetaDatabaseConfiguration(CreateIntegrationDatabaseConfiguration(tc)).VisibleParameters;
        }

        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        [IterativeTestCase(typeof(TestConfiguration), Description = "Checks if all parameters (annotated plus extra) have getters and setters")]
        public void CheckIfEveryPropertyHasGettersAndSetters(DatabaseProviderTestCase tc) {
            new MetaDatabaseConfiguration(CreateIntegrationDatabaseConfiguration(tc));
        }

        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        [IterativeTestCase(typeof(TestConfiguration), Description = "Checks if all annotated parameters have a supported type")]
        public void CheckIfEveryAnnotatedPropertyHasSupportedType(DatabaseProviderTestCase tc) {
            Func<Type, bool> IsSupported = (t) => {

                var supportedTypes = new List<Type> {
                    typeof(int),
                    typeof(string),
                    typeof(bool)
                };

                return t.IsEnum || supportedTypes.Contains(t);
            };

            var wrapper = new MetaDatabaseConfiguration(CreateIntegrationDatabaseConfiguration(tc));
            var writer = new StringWriter();
            foreach (var parameter in wrapper.Parameters) {
                if (!IsSupported(parameter.Type)) {
                    writer.WriteLine("Parameter " + parameter.Name + " has annottated property with unsupported type " + parameter.Type);
                }
            }
            var errorMessages = writer.ToString();

            Assert.AreEqual(string.Empty, errorMessages, errorMessages);
        }

    }
}
