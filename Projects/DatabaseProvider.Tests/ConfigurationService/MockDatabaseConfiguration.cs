/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Text;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;

namespace OutSystems.ServerTests.DatabaseProvider.ConfigurationService {

    public enum DirectionsEnum { Up, Down, Left, Right }

    public class MockDatabaseConfiguration : BaseDatabaseConfiguration {

        static readonly string INVISIBLE_TEXT_VALUE = "Invisibile";
       
        public override HubEdition.Extensibility.Data.IDatabaseProvider DatabaseProvider { get { throw new NotImplementedException(); } }

        public override string DatabaseIdentifier { get { return "Identifier"; } }

        [UserDefinedConfigurationParameter(Label = "MockText", Region = ParameterRegion.DatabaseLocation, Prompt = "MockText_Prompt", Order = 0, IsMandatory = false, IsPassword = true, VisibilityChecker = "IsTextVisible")]
        public string MockText { get; set; }

        [UserDefinedConfigurationParameter(Label = "MockText2", Region = ParameterRegion.DatabaseLocation, Prompt = "MockText2_Prompt", Order = 1, IsMandatory = true, IsPassword = false)]
        public string MockText2 { get; set; }

        [UserDefinedConfigurationParameter(Label = "MockInt", Region = ParameterRegion.UserSpecific, Prompt = "MockInt_Prompt", Order = 1, IsMandatory = true, Example = "MockInt_Example")]
        public int MockInt { get; set; }

        [UserDefinedConfigurationParameter(Label = "MockBool", Region = ParameterRegion.UserAdminSpecific, Prompt = "MockBool_Prompt", Order = 2, Example = "MockBool_Example")]
        public bool MockBool { get; set; }

        [UserDefinedConfigurationParameter(Label = "MockEnum", Region = ParameterRegion.Advanced, Prompt = "MockEnum_Prompt", Order = 3, Example = "MockEnum_Example")]
        public DirectionsEnum MockEnum { get; set; }

        public bool IsTextVisible() {
            return !MockText.Equals(INVISIBLE_TEXT_VALUE);
        }

        public override bool Equals(object obj) {
            if (!base.Equals(obj)) {
                return false;
            }

            var other = obj as MockDatabaseConfiguration;

            return ((other != null) && EqualsBasedOnParts(new object[] { MockText, MockInt, MockBool, MockEnum },
                new object[] { other.MockText, other.MockInt, other.MockBool, other.MockEnum }));
        }

        public override int GetHashCode() {
            return base.GetHashCode() ^ GetHashCodeBasedOnParts(MockText, MockInt, MockBool, MockEnum);
        }

        protected override string AssembleBasicConnectionString() {
            return new StringBuilder()
                .Append("MockText=").Append(MockText)
                .Append("MockInt=").Append(MockInt)
                .Append("MockBool=").Append(MockBool)
                .Append("MockEnum=").Append(MockEnum)
            .ToString();
        }

        private AdvancedConfiguration advancedConfiguration = new AdvancedConfiguration(null, null, null);

        public override AdvancedConfiguration AdvancedConfiguration {
            get {
                return advancedConfiguration;
            }
            set {
                advancedConfiguration = value;
            }
        }

        protected override string AssembleAdvancedConnectionString() {
            return AdvancedConfiguration.AdvancedConnectionStringField;
        }

        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration {
            get { throw new NotImplementedException(); }
        }
    }
}
