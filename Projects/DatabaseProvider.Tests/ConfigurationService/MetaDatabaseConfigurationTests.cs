/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using NUnitExtension.OutSystems.Framework;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration;
using OutSystems.ServerTests.DatabaseProvider.Framework;

namespace OutSystems.ServerTests.DatabaseProvider.ConfigurationService {

    [DashboardTestFixture(DashboardTest.DashboardTestKind)]
    public class MetaDatabaseConfigurationTests : DashboardTest {

        public enum DirectionsEnum { Up, Down, Left, Right }

        public class MockDatabaseConfiguration : BaseDatabaseConfiguration {

            static readonly string INVISIBLE_TEXT_VALUE = "Invisibile";

            public override HubEdition.Extensibility.Data.IDatabaseProvider DatabaseProvider { get { throw new NotImplementedException(); } }

            public override string DatabaseIdentifier { get { return "Identifier"; } }

            [UserDefinedConfigurationParameter(Label = "MockText", Region = ParameterRegion.DatabaseLocation, Prompt = "MockText_Prompt", Order = 0, IsMandatory = false, IsPassword = true, VisibilityChecker = "IsTextVisible")]
            public string MockText { get; set; }

            [UserDefinedConfigurationParameter(Label = "MockText2", Region = ParameterRegion.DatabaseLocation, Prompt = "MockText2_Prompt", Order = 1, IsMandatory = true, IsPassword = false)]
            public string MockText2 { get; set; }

            [UserDefinedConfigurationParameter(Label = "MockInt", Region = ParameterRegion.UserSpecific, Prompt = "MockInt_Prompt", Order = 1, IsMandatory = true, Example = "MockInt_Example")]
            public int MockInt { get; set; }

            [UserDefinedConfigurationParameter(Label = "MockBool", Region = ParameterRegion.UserAdminSpecific, Prompt = "MockBool_Prompt", Order = 2, Example = "MockBool_Example")]
            public bool MockBool { get; set; }

            [UserDefinedConfigurationParameter(Label = "MockEnum", Region = ParameterRegion.Advanced, Prompt = "MockEnum_Prompt", Order = 3, Example = "MockEnum_Example")]
            public DirectionsEnum MockEnum { get; set; }

            public bool IsTextVisible() {
                return MockText == null || !MockText.Equals(INVISIBLE_TEXT_VALUE);
            }

            public void SetConnectionStringTemplateExpressionProp( string value) {
                advancedConfiguration = new AdvancedConfiguration(null, null, value);
            }

            public override bool Equals(object obj) {
                if (!base.Equals(obj)) {
                    return false;
                }

                var other = obj as MockDatabaseConfiguration;

                return ((other != null) && EqualsBasedOnParts(new object[] { MockText, MockInt, MockBool, MockEnum },
                    new object[] { other.MockText, other.MockInt, other.MockBool, other.MockEnum }));
            }

            public override int GetHashCode() {
                return base.GetHashCode() ^ GetHashCodeBasedOnParts(MockText, MockInt, MockBool, MockEnum);
            }

            protected override string AssembleBasicConnectionString() {
                return new StringBuilder()
                    .Append("MockText=").Append(MockText)
                    .Append("MockInt=").Append(MockInt)
                    .Append("MockBool=").Append(MockBool)
                    .Append("MockEnum=").Append(MockEnum)
                .ToString();
            }

            private AdvancedConfiguration advancedConfiguration = new AdvancedConfiguration(null, null, null);

            public override AdvancedConfiguration AdvancedConfiguration {
                get {
                    return advancedConfiguration;
                }
                set {
                    advancedConfiguration = value;
                }
            }

            protected override string AssembleAdvancedConnectionString() {
                return AdvancedConfiguration.AdvancedConnectionStringField;
            }

            public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration {
                get { throw new NotImplementedException(); }
            }
        }

        [Test(Description = "Checks if tagged parameters are discovered")]
        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        public void AnnotatedParametersAreDiscovered() {

            var config = new MockDatabaseConfiguration();
            var wrapper = new MetaDatabaseConfiguration(config);

            var expectedAnnotatedParameters = new List<string>() {
                "MockText",
                "MockText2",
                "MockInt",
                "MockBool",
                "MockEnum"
            };

            var obtainedParameters = wrapper.VisibleParameters.Select(p => p.Name).ToList();

            CollectionAssert.AreEquivalent(expectedAnnotatedParameters, obtainedParameters);

        }

        [Test(Description = "Checks if extra parameters are discovered")]
        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        public void NonUserDefinedParametersAreDiscovered() {

            var config = new MockDatabaseConfiguration();
            var wrapper = new MetaDatabaseConfiguration(config);

            var expectedParameters = new List<string>() {
                "ConnectionStringOverride"
            };

            var obtainedParameters = wrapper.Parameters.Where(p => !(p is IUserDefinedParameter)).Select(p => p.Name).ToList();

            CollectionAssert.AreEquivalent(expectedParameters, obtainedParameters);
        }

        [Test(Description = "Check if GetParameter retrives an annotated parameter")]
        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        public void GetParameterFindsOnAnnotatedParameters() {

            var config = new MockDatabaseConfiguration();
            var wrapper = new MetaDatabaseConfiguration(config);

            var retrieved = wrapper.GetParameter("MockText");

            Assert.AreEqual("MockText", retrieved.Name);
        }

        [Test(Description = "Check if GetParameter retrives an extra parameter")]
        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        public void GetParameterFindsOnExtraParameters() {

            var config = new MockDatabaseConfiguration();
            var wrapper = new MetaDatabaseConfiguration(config);

            var retrived = wrapper.GetParameter("ConnectionStringOverride");

            Assert.AreEqual("ConnectionStringOverride", retrived.Name);
        }

        [Test(Description = "Check if GetParameter returns null when no parameter is found")]
        [TestDetails(CreatedBy = "rcn", Feature = "Database Abstraction Layer", TestIssue = "613292")]
        public void GetParameterReturnsNullWhenNoParameterFound() {

            var config = new MockDatabaseConfiguration();
            var wrapper = new MetaDatabaseConfiguration(config);

            var retrived = wrapper.GetParameter("IDontExist");

            Assert.IsNull(retrived, "Found non existing parameter " + "IDontExist");

        }

        [Test(Description = "Check that only Advanced And UserSpecific appear, Template Expression Hidden")]
        [TestDetails(CreatedBy = "lfl", Feature = "Database Abstraction Layer", TestIssue = "609920")]
        public void VisibleParametersOfAdvancedConfiguration() {
            var config = new MockDatabaseConfiguration();
            config.AdvancedConfiguration.AdvancedConnectionStringField = "";

            var wrapper = new MetaDatabaseConfiguration(config);

            var expectedAnnotatedParameters = new List<string>() {
                "MockInt",
                "AdvancedConnectionStringField"
            };

            var obtainedParameters = wrapper.VisibleParameters.Select(p => p.Name).ToList();

            CollectionAssert.AreEquivalent(expectedAnnotatedParameters, obtainedParameters);
        }

        [Test(Description = "Check that only Advanced And UserSpecific, Template Expression NOT Hidden")]
        [TestDetails(CreatedBy = "lfl", Feature = "Database Abstraction Layer", TestIssue = "609920")]
        public void VisibleParametersOfAdvancedConfigurationWithTemplateExpression() {
            var config = new MockDatabaseConfiguration();
            config.SetConnectionStringTemplateExpressionProp("Some Value");
            config.AdvancedConfiguration.AdvancedConnectionStringField = "";
            

            var wrapper = new MetaDatabaseConfiguration(config);

            var expectedAnnotatedParameters = new List<string>() {
                "MockInt",
                "ConnectionStringTemplateExpression", 
                "AdvancedConnectionStringField"
            };

            var obtainedParameters = wrapper.VisibleParameters.Select(p => p.Name).ToList();

            CollectionAssert.AreEquivalent(expectedAnnotatedParameters, obtainedParameters);
        }

    }
}
