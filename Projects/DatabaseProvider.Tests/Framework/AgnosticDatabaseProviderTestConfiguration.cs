/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.RuntimeCommon;

namespace OutSystems.ServerTests.DatabaseProvider.Framework {
    public abstract class BaseAgnosticDatabaseProviderTestConfiguration<TDatabaseProvider, TDatabaseProviderTestCase>
            : BaseDatabaseProviderTestConfiguration<TDatabaseProvider, TDatabaseProviderTestCase> 
                where TDatabaseProvider: IDatabaseProvider where TDatabaseProviderTestCase: IDatabaseProviderTestCase<TDatabaseProvider>, new() {

        protected virtual bool IsServerOnly {
            get { return false; }
        }

        private static readonly DatabasePluginProvider<TDatabaseProvider> serverPluginProvider = null;
        private static readonly DatabasePluginProvider<TDatabaseProvider> internalPluginProvider = null;

        private IEnumerable<TDatabaseProvider> providersToTest = null;
        protected override IEnumerable<TDatabaseProvider> ProvidersToTest {
            get {
                if (providersToTest == null) {
                    var ptt = serverPluginProvider.Implementations;
                    if (!IsServerOnly) {
                        ptt = ptt.Union(internalPluginProvider.Implementations);
                    }
                    providersToTest = ptt.ToList();
                }
                return providersToTest;
            }
        }

        private static DirectoryInfo BaseDirectory {
            get { return new DirectoryInfo(AppDomain.CurrentDomain.BaseDirectory);  }
        }

        static BaseAgnosticDatabaseProviderTestConfiguration() {
            // Plugins are loaded relative to AppBase so that they work on the developer machine and on regressions
            var serverPluginsDir = new DirectoryInfo(Path.Combine(Path.Combine(BaseDirectory.FullName, "plugins"), "database"));
            serverPluginProvider = new DatabasePluginProvider<TDatabaseProvider>(serverPluginsDir);

            // Not 100% correct since they should have a different interface, but can't reference it in this project
            var internalPluginsDir = new DirectoryInfo(Path.Combine(serverPluginsDir.FullName, "internal"));
            internalPluginProvider = new DatabasePluginProvider<TDatabaseProvider>(internalPluginsDir);
        }

    }

    public abstract class AgnosticDatabaseProviderTestConfiguration
        : BaseAgnosticDatabaseProviderTestConfiguration<IDatabaseProvider, DatabaseProviderTestCase> { }

    public abstract class PlatformAgnosticDatabaseProviderTestConfiguration
        : BaseAgnosticDatabaseProviderTestConfiguration<IPlatformDatabaseProvider, PlatformDatabaseProviderTestCase> { }

}
