/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using NUnitExtension.OutSystems.Framework;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration;
using OutSystems.RuntimeCommon;

namespace OutSystems.ServerTests.DatabaseProvider.Framework {
    public abstract class BaseDatabaseProviderTestConfiguration<TDatabaseProvider, TDatabaseProviderTestCase>
            : IDatabaseProviderTestConfiguration<TDatabaseProvider> 
                where TDatabaseProvider : IDatabaseProvider where TDatabaseProviderTestCase: IDatabaseProviderTestCase<TDatabaseProvider>, new() {

        private class ConfigurationLoader {
            private readonly string directoryToSearch;
            private readonly TDatabaseProvider provider;

            public ConfigurationLoader(TDatabaseProvider provider, string directoryToSearch) {
                this.directoryToSearch = directoryToSearch;
                this.provider = provider;
            }

            private string ConfigurationFilePath(string configFileSuffix) {
                DirectoryInfo directory = new DirectoryInfo(directoryToSearch);
                foreach (FileInfo file in directory.GetFiles()) {
                    if (file.Name.EndsWith(configFileSuffix)) {
                        return file.FullName;
                    }
                }
                return null;
            }

            private IRuntimeDatabaseConfiguration LoadConfiguration(string filepath) {
                var xml = XDocument.Load(filepath);
                var conf = provider.CreateEmptyIntegrationDatabaseConfiguration().RuntimeDatabaseConfiguration;
                Deserializers.ForRuntime.Deserialize(xml.Root, conf);
                return conf;
            }

            public IRuntimeDatabaseConfiguration Load(string configFileSuffix) {
                var configFilePath = ConfigurationFilePath(configFileSuffix);
                return configFilePath == null ? null : LoadConfiguration(configFilePath);
            }
        }
        
        private class TestCaseConfiguration {
            public string Name { get; set; }
            public IRuntimeDatabaseConfiguration Run { get; set; }
            public IRuntimeDatabaseConfiguration Bootstrap { get; set; }
        }

        private class SQLScriptLoader {
            private readonly string scriptsNameSuffix;

            public SQLScriptLoader(string scriptsNameSuffix) {
                this.scriptsNameSuffix = scriptsNameSuffix;
            }

            private string ScriptFilePath(string directoryToSearch) {
                DirectoryInfo directory = new DirectoryInfo(directoryToSearch);
                foreach (FileInfo file in directory.GetFiles()) {
                    if (file.Name.EndsWith(scriptsNameSuffix)) {
                        return file.FullName;
                    }
                }
                return null;
            }
            
            private IEnumerable<string> LoadScript(string path) {
                using (StreamReader reader = new StreamReader(path)) {
                    List<string> statements = new List<string>();
                    string line;
                    while ((line = reader.ReadLine()) != null) {
                        if (line.Trim().Length == 0) {
                            continue;
                        }
                        statements.Add(line);
                    }
                    return statements;
                }
            }

            public IEnumerable<string> Load(string directoryToSearch) {
                var scriptFilePath = ScriptFilePath(directoryToSearch);
                return scriptFilePath == null ? null : LoadScript(scriptFilePath);
            }
        }

        private class TestCaseScripts {
            public IEnumerable<string> Bootstrap { get; set; }
            public IEnumerable<string> Teardown { get; set; }
        }
        
        protected class TestSettings {
            public static string Get(string settingKey) {
                
                
                string value = ConfigurationManager.AppSettings[settingKey];
                if (string.IsNullOrEmpty(value)) {
                    throw new InvalidOperationException(string.Format("Could not find {0} in configuration file", settingKey));
                }
                return value;
            }
        }

        private const string CONFIG_FILE_EXTENSION = "_NET.config";
        private const string BOOTSTRAP_CONFIG_FILE = "bootstrap" + CONFIG_FILE_EXTENSION;
        private const string BASE_CONFIGURATION_FILES_SETTING = "DatabaseProviderTests.BaseFilesPath";
        private const string DEFAULT_CONFIGURATION_FILES_SETTING = "DatabaseProviderTests.DefaultConfigurationFilesPath";
        private const string SQLSCRIPT_FILE_EXTENSION = ".sql";
        private const string TEARDOWN_FILE_SUFFIX = "_teardown" + SQLSCRIPT_FILE_EXTENSION;
        private const string BOOTSTRAP_FILE_SUFFIX = "_bootstrap" + SQLSCRIPT_FILE_EXTENSION;
        
        private static readonly Regex configParamRegex = new Regex(@"([%]\w+[%])", RegexOptions.Compiled | RegexOptions.CultureInvariant);        

        private static IDictionary<Type, IEnumerable<IDatabaseProviderTestCase<TDatabaseProvider>>> testCases 
            = new Dictionary<Type, IEnumerable<IDatabaseProviderTestCase<TDatabaseProvider>>>();

        private static IDictionary<string, IEnumerable<TestCaseConfiguration>> providerConfigurations
            = new Dictionary<string, IEnumerable<TestCaseConfiguration>>(); 

        IEnumerable ITestIterator.values { get { return TestCases; } }

        protected abstract string ConfigurationPathSettingName { get; }

        protected abstract IEnumerable<TDatabaseProvider> ProvidersToTest { get; }

        protected virtual bool RunWithBootstrapUser { get { return false; } }

        protected virtual bool ExecuteScriptsWithoutTransaction { get { return false; }}

        private IEnumerable<IDatabaseProviderTestCase<TDatabaseProvider>> LoadTestCasesFor(TDatabaseProvider provider) {
            var configs = ConfigurationsFor(provider).ToList();
            var script = ScriptsFor(provider);

            foreach (var config in configs) {
                var testCase = new TDatabaseProviderTestCase();
                testCase.Name = provider.Properties.DisplayName.Replace(" / ","_") + " with conf " + config.Name;
                testCase.InitializeServices(provider, config.Run, config.Bootstrap, RunWithBootstrapUser);

                // The placeholders should be replaced with the configuration of runtime... because of the grants for the runtime user...
                testCase.BootstrapScripts = ProcessScripts(script.Bootstrap, config.Run);
                testCase.TeardownScripts = ProcessScripts(script.Teardown, config.Run);
                testCase.ExecuteScriptsWithoutTransaction = ExecuteScriptsWithoutTransaction;
                yield return testCase;
            }
        }

        private TestCaseScripts ScriptsFor(TDatabaseProvider provider) {
            string pluginKey = provider.Key.Serialize();

            var baseScriptsDir = Path.Combine(BaseConfigurationDirectory, pluginKey);
            var specificScriptsDir = Path.Combine(TestConfigurationDirectory, pluginKey);
            var defaultScriptsDir = Path.Combine(DefaultConfigurationDirectory, pluginKey);

            Func<string, IEnumerable<string>> tryLoadScripts = (scriptFileSuffix) => {
                var loader = new SQLScriptLoader(scriptFileSuffix);
                IEnumerable<string> scripts = null;
                if (Directory.Exists(specificScriptsDir)) {
                    scripts = loader.Load(specificScriptsDir);
                }
                if (scripts == null && Directory.Exists(baseScriptsDir)) {
                    scripts = loader.Load(baseScriptsDir);
                }
                if (scripts == null && Directory.Exists(defaultScriptsDir)) {
                    scripts = loader.Load(defaultScriptsDir);
                }
                return scripts;
            };

            return new TestCaseScripts {
                Bootstrap = tryLoadScripts(BOOTSTRAP_FILE_SUFFIX) ?? Enumerable.Empty<string>(),
                Teardown = tryLoadScripts(TEARDOWN_FILE_SUFFIX) ?? Enumerable.Empty<string>()
            };

        }

        protected string TestConfigurationDirectory { get { return TestSettings.Get(ConfigurationPathSettingName); } }

        public IEnumerable<IDatabaseProviderTestCase<TDatabaseProvider>> TestCases {
            get {
                IEnumerable<IDatabaseProviderTestCase<TDatabaseProvider>> result;
                Type selfType = GetType();

                if (!testCases.TryGetValue(selfType, out result)) {
                    result = ProvidersToTest.SelectMany(p => LoadTestCasesFor(p)).ToList();
                    testCases.Add(selfType, result);
                }

                return result;
            }
        }
        
        private static IEnumerable<TestCaseConfiguration> ConfigurationsFor(TDatabaseProvider provider) {
            string providerKey = provider.Key.Serialize();
            IEnumerable<TestCaseConfiguration> result;

            if (providerConfigurations.TryGetValue(providerKey, out result)) {
                return result;
            } else {
                IList<TestCaseConfiguration> resultList = new List<TestCaseConfiguration>();
                string configurationsPath = Path.Combine(BaseConfigurationDirectory, providerKey);
                if (!Directory.Exists(configurationsPath)) {
                    configurationsPath = Path.Combine(DefaultConfigurationDirectory, providerKey);
                }

                if (Directory.Exists(configurationsPath)) { 
                    DirectoryInfo configDir = new DirectoryInfo(configurationsPath);

                    foreach (var dir in configDir.GetDirectories()) {
                        var loader = new ConfigurationLoader(provider, dir.FullName);

                        var runConfig = loader.Load(providerKey + CONFIG_FILE_EXTENSION);
                        var bootstrapConfig = loader.Load(BOOTSTRAP_CONFIG_FILE);

                        if (runConfig == null) continue;

                        resultList.Add(new TestCaseConfiguration {
                            Name = dir.Name,
                            Run = runConfig,
                            Bootstrap = bootstrapConfig ?? runConfig
                        });
                    }
                }

                providerConfigurations.Add(providerKey, resultList);
                return resultList; 
            }
        }

        private static string BaseConfigurationDirectory {
            get {
                return TestSettings.Get(BASE_CONFIGURATION_FILES_SETTING);
            }
        }

        private static string DefaultConfigurationDirectory {
            get {
                return TestSettings.Get(DEFAULT_CONFIGURATION_FILES_SETTING);
            }
        }

        private static IEnumerable<string> ProcessScripts(IEnumerable<string> scripts, IRuntimeDatabaseConfiguration config) {
            return scripts.Select(script => Replace(script, configParamRegex, m => ProcessScript(m, config)));
        }

        private static string ProcessScript(Match match, IRuntimeDatabaseConfiguration config) {
            string configParamName = match.Groups[1].Value.Substring(1, match.Groups[1].Value.Length - 2);

            if (configParamName == "Machine") {
                return BaseDatabaseProviderTest.MachineName;
            }

            IParameter param = new MetaDatabaseConfiguration(config).GetParameter(configParamName);
            if (param == null) {
                throw new Exception("Configuration parameter '" + configParamName + "' used in SQL script was not found in the configuration.");
            }
            return param.Get();
        }

        private static string Replace(string sql, Regex regex, MatchEvaluator matchEval) {
            int fixup = 0;
            MatchCollection mc = regex.Matches(sql);
            for (int i = 0; i < mc.Count; i++) {
                string s = matchEval(mc[i]);
                sql = ReplaceSpan(sql, mc[i].Index + fixup, mc[i].Length, s);
                fixup += s.Length - mc[i].Value.Length;
            }
            return sql;
        }

        private static string ReplaceSpan(string sql, int start, int length, string replaceWith) {
            return sql.Substring(0, start) + replaceWith + sql.Substring(start + length);
        }
    }
}
