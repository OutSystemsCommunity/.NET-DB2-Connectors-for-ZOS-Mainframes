/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.IntrospectionService;

namespace SampleDatabaseProvider.Introspection {
    
    /// <summary>
    /// Inspects a database server to retrieve information about its data model.
    /// </summary>
    public class IntrospectionService : BaseIntrospectionService{

        /// <summary>
        /// Initializes a new instance of the <see cref="IntrospectionService"/> class.
        /// </summary>
        /// <param name="databaseServices">The database services.</param>
        public IntrospectionService(IDatabaseServices databaseServices) : base(databaseServices) {}

        /// <summary>
        /// Returns the list of databases that can be accessed from the current configuration. A database is a logical group of data objects (e.g. tables, views)
        /// that the plugin maps to a db-specific concept (e.g. SQL Server catalog or Oracle schema).
        /// </summary>
        /// <returns>List of available databases in the given server</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        public override IEnumerable<IDatabaseInfo> ListDatabases() {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a list of table sources (e.g. tables, views) that belong to a given database. 
        /// The returned table sources must have different display names.
        /// </summary>
        /// <param name="database">Database from which we want to fetch the list of tables</param>
        /// <param name="isTableSourceToIgnore">The delegate to call to see if the table source should be ignored and excluded from the returned list</param>
        /// <returns>List of available table sources in the given database</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        public override IEnumerable<ITableSourceInfo> ListTableSources(IDatabaseInfo database, IsTableSourceToIgnore isTableSourceToIgnore) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns the list of foreign keys of the table source (e.g. table, view)
        /// </summary>
        /// <param name="tableSource">Table source from which we want to fetch the list of foreign keys</param>        
        /// <returns>The list of foreign keys of the table</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        public override IEnumerable<ITableSourceForeignKeyInfo> GetTableSourceForeignKeys(ITableSourceInfo tableSource) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns the list of columns of the table source (e.g. table, view)
        /// </summary>
        /// <param name="tableSource">Table source from which we want to fetch the list of columns</param>        
        /// <returns>The columns of the table</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        public override IEnumerable<ITableSourceColumnInfo> GetTableSourceColumns(ITableSourceInfo tableSource) {
            throw new NotImplementedException();
        }
    }
}
