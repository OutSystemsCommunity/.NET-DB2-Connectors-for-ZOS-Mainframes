/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;

namespace SampleDatabaseProvider.Configuration {

    /// <summary>
    /// This class encapsulates a connection string and other configuration information required to connect to a database.
    /// </summary>
    public class DatabaseConfiguration : BaseDatabaseConfiguration {

        /// <summary>
        /// Gets the database provider. It provides information about the database,
        /// and access to its services.
        /// </summary>
        public override IDatabaseProvider DatabaseProvider {
            get { return SampleDatabaseProvider.DatabaseProvider.Instance; } 
        }

        /*
        This annotation defines how the configuration will be displayed in Service Center by using the following properties:
            - Label: Label of the form for this field
            - IsMandatory: Defines if the configuration field is mandatory
            - Order: The order within each region that the field will show up in the configuration form
            - Region: Form segment that groups related configuration fields
                 * DatabaseLocation: First region of the configuration form that defines the database you are going to integrate with.
                                     Common examples of fields in this region are: Server, Port and Schema.
                 * UserSpecific: Second region of the configuration form that defines authentication information required to connect.
                                 Common examples of fields are: Username and password
                 * AdminSpecific: Ignore for integration purposes
                 * Advanced: Ignore for integration purposes
         
        In order to better understand the annotations please compare the code of this sample with the configuration screen of a MySQL database connection
            http://localhost/ServiceCenter/DatabaseConnections_List.aspx
        */

        [UserDefinedConfigurationParameter(Label = "Server", IsMandatory = true, Order = 1, Region = ParameterRegion.DatabaseLocation, Prompt = "Server")]
        public string Server { get; set; }

        [UserDefinedConfigurationParameter(Label = "Username", IsMandatory = true, Order = 1, Region = ParameterRegion.UserSpecific, Prompt = "Username")]
        public string Username { get; set; }

        [UserDefinedConfigurationParameter(Label = "Password", IsPassword = true, Order = 2, Region = ParameterRegion.UserSpecific, Prompt = "Password")]
        public string Password { get; set; }

        /// <summary>
        /// This property represents the database identifier to be used in the configuration.
        /// </summary>
        /// <exception cref="System.NotImplementedException"></exception>
        public override string DatabaseIdentifier {
            get { throw new NotImplementedException(); }
        }

        /// <summary>
        /// This property represents the advanced configuration object
        /// </summary>
        public override AdvancedConfiguration AdvancedConfiguration { get; set; }

        /// <summary>
        /// Returns a basic connection string with attributes such as username and password.
        /// </summary>
        /// <returns></returns>
        protected override string AssembleBasicConnectionString() {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns an advanced connection string with attributes that might be specific for a particular database.
        /// </summary>
        /// <returns></returns>
        protected override string AssembleAdvancedConnectionString() {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets the runtime database configuration.
        /// </summary>
        /// <value>
        /// The runtime database configuration.
        /// </value>
        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration {
            get { throw new NotImplementedException(); }
        }
    }
}
