/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.Extensibility.Data.DMLService;

namespace SampleDatabaseProvider.DML {

    /// <summary>
    /// Class for generating the DML functions required by the applications to perform simple queries
    /// </summary>
    public class DMLFunctions : BaseDMLFunctions {

        /// <summary>
        /// Initializes a new instance of the <see cref="DMLFunctions"/> class.
        /// </summary>
        /// <param name="dmlService">The DML service.</param>
        internal DMLFunctions(IDMLService dmlService) : base(dmlService) { }

        /// <summary>
        /// This property represents the associated DML service.
        /// </summary>
        public new DMLService DMLService {
            get { return (DMLService)base.DMLService; }
        }

        /// <summary>
        /// Returns a DML expression that computes the decimal number 'n' truncated to integer removing the decimal part of 'n'.
        /// </summary>
        /// <param name="n">DML expression of type Decimal that evaluates to the decimal number to truncate</param>
        /// <returns>
        /// A DML expression that evaluates to a Decimal.
        /// </returns>
        public override string Trunc(string n)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that searches an expression for another expression and returns its starting position if found.
        /// Returns -1 if the <paramref name="search" /> expression is empty or cannot be found.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <param name="search">A DML expression that evaluates to Text.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string Index(string t, string search)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes the number of characters in a string.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string Length(string t)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes a substring beginning at <code>start</code> zero-based position
        /// and with <code>length</code> characters.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <param name="start">A DML expression that evaluates to an Integer, containing the start index.</param>
        /// <param name="length">A DML expression that evaluates to an Integer, containing the length of the text to return.</param>
        /// <returns>
        /// A DML expression that evaluates to Text.
        /// </returns>
        public override string Substr(string t, string start, string length)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that removes all leading and trailing white spaces from a string.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>
        /// A DML expression that evaluates to Text.
        /// </returns>
        public override string Trim(string t)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that adds days to a DateTime and returns a valid DataTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to a Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to a DateTime.
        /// </returns>
        public override string AddDays(string dt, string n)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that adds days to a DateTime and returns a valid DataTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to a Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to a DateTime.
        /// </returns>
        public override string AddHours(string dt, string n)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that adds minutes to a DateTime and returns a valid DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to an Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to a DateTime.
        /// </returns>
        public override string AddMinutes(string dt, string n)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that adds months to a DateTime and returns a valid DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to an Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to a DateTime.
        /// </returns>
        public override string AddMonths(string dt, string n)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that adds seconds to a DateTime and returns a valid DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to an Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to a DateTime.
        /// </returns>
        public override string AddSeconds(string dt, string n)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that adds years to a DateTime and returns a valid DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to an Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to a DateTime.
        /// </returns>
        public override string AddYears(string dt, string n)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that creates a new DateTime given a Date and a Time.
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Date.</param>
        /// <param name="t">A DML expression that evaluates to a Time.</param>
        /// <returns>
        /// A DML expression that evaluates to a DateTime.
        /// </returns>
        public override string BuildDateTime(string d, string t)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes the day of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string Day(string dt)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes the week day of a DateTime, ranging from 0 (Sunday) to 6 (Saturday).
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string DayOfWeek(string dt)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes how many days have passed between two DateTimes.
        /// Returns zero if the two dates are the same, a positive integer if <paramref name="dt1" /> is smaller than <paramref name="dt2" />, and
        /// a negative number otherwise.
        /// </summary>
        /// <param name="dt1">First DML expression that evaluates to a DateTime.</param>
        /// <param name="dt2">Second DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string DiffDays(string dt1, string dt2)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes how many hours have passed between two DateTimes.
        /// Returns zero if the two dates and hours are the same, a positive integer if <paramref name="dt1" /> is smaller than <paramref name="dt2" />, and
        /// a negative number otherwise.
        /// </summary>
        /// <param name="dt1">First DML expression that evaluates to a DateTime.</param>
        /// <param name="dt2">Second DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string DiffHours(string dt1, string dt2)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes how many minutes have passed between two DateTimes.
        /// Returns zero if the two dates, hours and minutes are the same, a positive integer if <paramref name="dt1" /> is smaller than <paramref name="dt2" />, and
        /// a negative number otherwise.
        /// </summary>
        /// <param name="dt1">A DML expression that evaluates to a DateTime.</param>
        /// <param name="dt2">A DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string DiffMinutes(string dt1, string dt2)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes how many seconds have passed between two DateTimes.
        /// Returns zero if the two dates, hours, minutes, and seconds are the same, a positive integer if <paramref name="dt1" /> is smaller than
        /// <paramref name="dt2" />, and a negative number otherwise.
        /// </summary>
        /// <param name="dt1">A DML expression that evaluates to a DateTime.</param>
        /// <param name="dt2">A DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string DiffSeconds(string dt1, string dt2)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes the hour part of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string Hour(string dt)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes the minute part of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string Minute(string dt)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes the month part of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string Month(string dt)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes a new date from a year, month, and day.
        /// </summary>
        /// <param name="y">A DML expression that evaluates to an Integer.</param>
        /// <param name="m">A DML expression that evaluates to an Integer.</param>
        /// <param name="d">A DML expression that evaluates to an Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to a Date.
        /// </returns>
        public override string NewDate(string y, string m, string d)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes a new DateTime from a year, month, day, hour, minute, and second.
        /// </summary>
        /// <param name="y">A DML expression that evaluates to an Integer.</param>
        /// <param name="mo">A DML expression that evaluates to an Integer.</param>
        /// <param name="d">A DML expression that evaluates to an Integer.</param>
        /// <param name="h">A DML expression that evaluates to an Integer.</param>
        /// <param name="m">A DML expression that evaluates to an Integer.</param>
        /// <param name="s">A DML expression that evaluates to an Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to DateTime.
        /// </returns>
        public override string NewDateTime(string y, string mo, string d, string h, string m, string s)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes a new Time from an hour, minute, and second.
        /// </summary>
        /// <param name="h">A DML expression that evaluates to an Integer.</param>
        /// <param name="m">A DML expression that evaluates to an Integer.</param>
        /// <param name="s">A DML expression that evaluates to an Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to Time.
        /// </returns>
        public override string NewTime(string h, string m, string s)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes the seconds part of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string Second(string dt)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes the year part of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string Year(string dt)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a Boolean expression to an Integer. The expression evaluates into
        /// 1 if the boolean is True, or 0 if False.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to a Boolean.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string BooleanToInteger(string b)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that convers a Boolean in its textual representation: <code>True</code> or <code>False</code>.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to Boolean.</param>
        /// <returns>
        /// A DML expression that evaluates to Text.
        /// </returns>
        public override string BooleanToText(string b)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a DateTime to a Date, by dropping the Time component.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to a Date.
        /// </returns>
        public override string DateTimeToDate(string dt)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a DateTime to its textual representation, using a specified format.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
        /// <returns>
        /// A DML expression that evaluates to Text.
        /// </returns>
        public override string DateTimeToText(string dt, string dateFormat)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a DateTime to a Time, by dropping the Date component.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>
        /// A DML expression that evaluates to a Time.
        /// </returns>
        public override string DateTimeToTime(string dt)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a Date to its textual representation, using a specified format.
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Date.</param>
        /// <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
        /// <returns>
        /// A DML expression that evaluates to Text.
        /// </returns>
        public override string DateToText(string d, string dateFormat)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns an SQL expreession that converts a Decimal to a Boolean. A Decimal value of 0.0 is False, all other values are True.
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Decimal.</param>
        /// <returns>
        /// A DML expression that evaluates to Boolean.
        /// </returns>
        public override string DecimalToBoolean(string d)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a Decimal to an Integer.
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Decimal.</param>
        /// <returns>
        /// A DML expression that evaluates to a Boolean.
        /// </returns>
        public override string DecimalToInteger(string d)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a Decimal to its textual representation.
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Decimal.</param>
        /// <returns>
        /// A DML expression that evaluates to a Decimal.
        /// </returns>
        public override string DecimalToText(string d)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts an Integer to a Boolean.
        /// A Decimal value of 0 is False, all other values are True.
        /// </summary>
        /// <param name="i">A DML expression that evaluates to an Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to a Boolean.
        /// </returns>
        public override string IntegerToBoolean(string i)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts an Integer to a Decimal.
        /// </summary>
        /// <param name="i">A DML expression that evaluates to an Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to a decimal.
        /// </returns>
        public override string IntegerToDecimal(string i)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts an Integer to its textual representation.
        /// </summary>
        /// <param name="i">A DML expression that evaluates to an Integer.</param>
        /// <returns>
        /// A DML expression that evaluates to Text.
        /// </returns>
        public override string IntegerToText(string i)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that computes a Null Date (1900-01-01).
        /// </summary>
        /// <returns>
        /// A DML expression that evaluates to a Date.
        /// </returns>
        public override string NullDate()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts Text to a Date.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
        /// <returns>
        /// A DML expression that evaluates to a Date.
        /// </returns>
        public override string TextToDate(string t, string dateFormat)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Provides a DML expression that converts Text 't' to a DateTime value.
        /// </summary>
        /// <param name="t">DML expression that evaluates to a text value</param>
        /// <param name="dateFormat">date format used to serialize the date component of the text value (e.g. YYYY-MM-DD)</param>
        /// <returns>
        /// DML expression of type DateTime
        /// </returns>
        public override string TextToDateTime(string t, string dateFormat)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts Text to a DateTime.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>
        /// A DML expression that evaluates to a DateTime.
        /// </returns>
        public override string TextToDecimal(string t)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts Text to an Integer.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>
        /// A DML expression that evaluates to an Integer.
        /// </returns>
        public override string TextToInteger(string t)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts Text to Time.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>
        /// A DML expression that evaluates to Time.
        /// </returns>
        public override string TextToTime(string t)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a Time to its text value in the format <code>hh:mm:ss</code>.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Time.</param>
        /// <returns>
        /// A DML expression that evaluates to Text.
        /// </returns>
        public override string TimeToText(string t)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a Decimal to a Long Integer.
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Decimal.</param>
        /// <returns>A DML expression that evaluates to Long Integer.</returns>
        public override string DecimalToLongInteger(string d) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts an Integer to an (untyped) Identifier.
        /// </summary>
        /// <param name="i">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        public override string IdentifierToInteger(string id) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Provides a DML expression that converts Identifier 'id' to a Long Integer value.
        /// </summary>
        /// <param name="id">DML expression that evaluates to a Long Integer value</param>
        /// <returns>DML expression of type Long Integer</returns>
        public override string IdentifierToLongInteger(string id) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts an Identifier to its textual representation.
        /// </summary>
        /// <param name="id">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        public override string IdentifierToText(string id) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a Long Integer to an Integer.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to a Long Integer.</param>
        /// <returns>A DML expression that evaluates to Integer.</returns>
        public override string LongIntegerToInteger(string b) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a Long Integer to a Decimal.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to a Long Integer.</param>
        /// <returns>A DML expression that evaluates to Decimal.</returns>
        public override string LongIntegerToDecimal(string b) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts an Integer to a Long Integer.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to Long Integer.</returns>
        public override string IntegerToLongInteger(string b) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts a Long Integer to its textual representation.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to a Long Integer.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        public override string LongIntegerToText(string b) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a DML expression that converts Text to a Long Integer.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to a Long Integer.</returns>
        public override string TextToLongInteger(string t) {
            throw new NotImplementedException();
        }
    }
}
