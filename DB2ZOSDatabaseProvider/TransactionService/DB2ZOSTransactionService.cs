/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Data;

using IBM.Data.DB2;

using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.TransactionService;
using OutSystems.RuntimeCommon.ObfuscationProperties;
using OutSystems.HubEdition.DatabaseProvider.DB2ZOS.ConfigurationService;


namespace OutSystems.HubEdition.DatabaseProvider.DB2ZOS.TransactionService
{
    [DoNotObfuscate]
    public class DB2ZOSTransactionService : BaseTransactionService {

        public DB2ZOSTransactionService(IDatabaseServices databaseServices) : base(databaseServices) { }
        
        protected override IsolationLevel IsolationLevel { get { return IsolationLevel.ReadCommitted; } }

        protected override IDbConnection GetConnectionFromDriver() {
            IDbConnection conn = DB2Factory.Instance.CreateConnection();
            conn.ConnectionString = DatabaseServices.DatabaseConfiguration.ConnectionString;
           
            return conn;
        }

        public override ITransactionManager CreateTransactionManager() {
            return new GenericTransactionManager(this);
        }

        public override IDbTransaction CreateTransaction(IDbConnection conn) {
            if (((DB2ZOSRuntimeDatabaseConfiguration)base.DatabaseServices.DatabaseConfiguration).AutoCommit) {
                return conn.BeginTransaction(System.Data.IsolationLevel.Chaos);
            } else {
                return base.CreateTransaction(conn);
            }
        }

        public override void CloseTransaction(IDbTransaction tran) {
            base.CloseTransaction(tran);
        }

        protected override void ReleaseAllPooledConnections() {			
			DB2Connection.ReleaseObjectPool();
        }
        
        public override bool NeedsSeparateAdminConnection { get { return false; } }

    }
}
